{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to MkDocs \u00b6 ss # ROS2 ## urdf and launch ## build ```bash # build all workspace packages colcon build # build signal package excluding dependencies colcon build --package-select my_rotate_bot # colcon build --symlink-install if you do colcon build --symlink-install, then instead of a copy of the launch file it will put a symbolic link to the launchfile. This means that if you change something to the launch file in your package you don't have to rebuild the package for the changes to take effect. This is only true for files that don require compilation, so --symlink-install will work for config files or python code / launch files etc. run \u00b6 ros2 launch my_rotate_bot robot_state_publisher.launch.py tf \u00b6 ros2 topic list # /joint_states /parameter_events /robot_description /rosout /tf /tf_static joint_state_publisher \u00b6 install from apt-get or package package.xml sudo apt install ros-foxy-joint-state-publisher or add to package.xml and run rosdep <exec_depend>joint_state_publisher</exec_depend> rosdep install -i --from-path src --rosdistro foxy -y run \u00b6 ros2 run joint_state_publisher joint_state_publisher ./src/my_rotate_bot/urdf/model.urdf robot_state_publisher vs joint_state_publisher \u00b6 Wiki \u00b6 git submodule add https://github.com/robobe/ros2_tutorial.wiki.git wiki git commit -m \"Adding wiki\" git push ```","title":"Welcome to MkDocs"},{"location":"#welcome-to-mkdocs","text":"ss # ROS2 ## urdf and launch ## build ```bash # build all workspace packages colcon build # build signal package excluding dependencies colcon build --package-select my_rotate_bot # colcon build --symlink-install if you do colcon build --symlink-install, then instead of a copy of the launch file it will put a symbolic link to the launchfile. This means that if you change something to the launch file in your package you don't have to rebuild the package for the changes to take effect. This is only true for files that don require compilation, so --symlink-install will work for config files or python code / launch files etc.","title":"Welcome to MkDocs"},{"location":"#run","text":"ros2 launch my_rotate_bot robot_state_publisher.launch.py","title":"run"},{"location":"#tf","text":"ros2 topic list # /joint_states /parameter_events /robot_description /rosout /tf /tf_static","title":"tf"},{"location":"#joint_state_publisher","text":"install from apt-get or package package.xml sudo apt install ros-foxy-joint-state-publisher or add to package.xml and run rosdep <exec_depend>joint_state_publisher</exec_depend> rosdep install -i --from-path src --rosdistro foxy -y","title":"joint_state_publisher"},{"location":"#run_1","text":"ros2 run joint_state_publisher joint_state_publisher ./src/my_rotate_bot/urdf/model.urdf","title":"run"},{"location":"#robot_state_publisher-vs-joint_state_publisher","text":"","title":"robot_state_publisher vs joint_state_publisher"},{"location":"#wiki","text":"git submodule add https://github.com/robobe/ros2_tutorial.wiki.git wiki git commit -m \"Adding wiki\" git push ```","title":"Wiki"},{"location":"gazebo/resource/","text":"Industrial Training - mulecar_simulation","title":"Resource"},{"location":"gazebo/camera_calibration/","text":"Camera calibration \u00b6 Reference \u00b6 calibration gazebo Getting Started With OpenCV in ROS 2 Foxy Fitzroy","title":"Camera calibration"},{"location":"gazebo/camera_calibration/#camera-calibration","text":"","title":"Camera calibration"},{"location":"gazebo/camera_calibration/#reference","text":"calibration gazebo Getting Started With OpenCV in ROS 2 Foxy Fitzroy","title":"Reference"},{"location":"gazebo/camera_calibration/launch-gazebo/","text":"launch Gazebo \u00b6 setup file \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 from setuptools import setup import os from glob import glob package_name = 'camera_calibration' setup ( name = package_name , version = '0.0.0' , packages = [ package_name ], data_files = [ ( 'share/ament_index/resource_index/packages' , [ 'resource/' + package_name ]), ( 'share/' + package_name , [ 'package.xml' ]), ( os . path . join ( 'share' , package_name , \"sdf\" ), glob ( 'sdf/*' )), ( os . path . join ( 'share' , package_name ), glob ( 'launch/*' )) ], install_requires = [ 'setuptools' ], zip_safe = True , maintainer = 'user' , maintainer_email = 'robobe2020@gmail.com' , description = 'TODO: Package description' , license = 'TODO: License declaration' , tests_require = [ 'pytest' ], entry_points = { 'console_scripts' : [ 'img_sub = camera_calibration.sub_image:main' , 'mini = camera_calibration.mini_node:main' , 'pnode = camera_calibration.param_node:main' ], }, )","title":"launch Gazebo"},{"location":"gazebo/camera_calibration/launch-gazebo/#launch-gazebo","text":"","title":"launch Gazebo"},{"location":"gazebo/camera_calibration/launch-gazebo/#setup-file","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 from setuptools import setup import os from glob import glob package_name = 'camera_calibration' setup ( name = package_name , version = '0.0.0' , packages = [ package_name ], data_files = [ ( 'share/ament_index/resource_index/packages' , [ 'resource/' + package_name ]), ( 'share/' + package_name , [ 'package.xml' ]), ( os . path . join ( 'share' , package_name , \"sdf\" ), glob ( 'sdf/*' )), ( os . path . join ( 'share' , package_name ), glob ( 'launch/*' )) ], install_requires = [ 'setuptools' ], zip_safe = True , maintainer = 'user' , maintainer_email = 'robobe2020@gmail.com' , description = 'TODO: Package description' , license = 'TODO: License declaration' , tests_require = [ 'pytest' ], entry_points = { 'console_scripts' : [ 'img_sub = camera_calibration.sub_image:main' , 'mini = camera_calibration.mini_node:main' , 'pnode = camera_calibration.param_node:main' ], }, )","title":"setup file"},{"location":"gazebo/plugins/hello_model_plugin/","text":"Model plugin \u00b6 Create basic plugins and project structure Project structure \u00b6 \u251c\u2500\u2500 bin \u2502 \u2514\u2500\u2500 libptz_plugin.so \u251c\u2500\u2500 build \u251c\u2500\u2500 CMakeLists.txt \u251c\u2500\u2500 plugins \u2502 \u251c\u2500\u2500 camera_ptz \u2502 \u2502 \u251c\u2500\u2500 CMakeLists.txt \u2502 \u2502 \u2514\u2500\u2500 ptz_plugin.cpp \u2502 \u2514\u2500\u2500 CMakeLists.txt \u251c\u2500\u2500 README.md \u2514\u2500\u2500 worlds \u2514\u2500\u2500 plug_teste.world CMakefiles hierarchy \u00b6 root plugins for each plugin sub directory root \u00b6 cmake_minimum_required ( VERSION 3 .0 ) project ( gz ) # Find Gazebo find_package ( gazebo REQUIRED ) include_directories ( ${ GAZEBO_INCLUDE_DIRS } ) link_directories ( ${ GAZEBO_LIBRARY_DIRS } ) set ( CMAKE_CXX_FLAGS \" ${ CMAKE_CXX_FLAGS } ${ GAZEBO_CXX_FLAGS } \" ) add_subdirectory ( plugins ) plugins \u00b6 This cmake file call other plugin cmake files add_subdirectory ( camera_ptz ) plugin \u00b6 add_library ( ptz_plugin SHARED ptz_plugin.cpp ) target_link_libraries ( ptz_plugin ${ GAZEBO_LIBRARIES } ) install ( TARGETS ptz_plugin DESTINATION ${ PROJECT_SOURCE_DIR } /bin ) Plugin code \u00b6 print log message to Console using gzdbg gzmsg gzwarn gzerr when running gazebo in verbose mode #include <functional> #include <gazebo/gazebo.hh> #include <gazebo/physics/physics.hh> #include <gazebo/common/common.hh> #include <ignition/math/Vector3.hh> namespace gazebo { class Ptz : public ModelPlugin { public : void Load ( physics :: ModelPtr _parent , sdf :: ElementPtr /*_sdf*/ ) { // Store the pointer to the model this -> model = _parent ; gzdbg << \"hello debug msg\" << std :: endl ; gzmsg << \"hello info msg\" << std :: endl ; gzwarn << \"hello warning msg\" << std :: endl ; gzerr << \"hello error msg\" << std :: endl ; // Listen to the update event. This event is broadcast every // simulation iteration. this -> updateConnection = event :: Events :: ConnectWorldUpdateBegin ( std :: bind ( & Ptz :: OnUpdate , this )); } // Called by the world update start event public : void OnUpdate () { } // Pointer to the model private : physics :: ModelPtr model ; // Pointer to the update event connection private : event :: ConnectionPtr updateConnection ; }; // Register this plugin with the simulator GZ_REGISTER_MODEL_PLUGIN ( Ptz ) } world example \u00b6 <?xml version=\"1.0\"?> <sdf version= \"1.4\" > <world name= \"default\" > <!-- Ground Plane --> <include> <uri> model://ground_plane </uri> </include> <include> <uri> model://sun </uri> </include> <model name= \"box\" > <pose> 0 0 0.5 0 0 0 </pose> <link name= \"link\" > <collision name= \"collision\" > <geometry> <box> <size> 1 1 1 </size> </box> </geometry> </collision> <visual name= \"visual\" > <geometry> <box> <size> 1 1 1 </size> </box> </geometry> </visual> </link> <plugin name= \"model_push\" filename= \"libptz_plugin.so\" /> </model> </world> </sdf> usage \u00b6 # dont forget add plugin `so` to GAZEBO_PLUGIN_PATH gazebo --verbose world/plug_test.world # Or use -s to load plugin gazebo --verbose -s bin/libptz_plugin.so worlds/plug_teste.world","title":"Model plugin"},{"location":"gazebo/plugins/hello_model_plugin/#model-plugin","text":"Create basic plugins and project structure","title":"Model plugin"},{"location":"gazebo/plugins/hello_model_plugin/#project-structure","text":"\u251c\u2500\u2500 bin \u2502 \u2514\u2500\u2500 libptz_plugin.so \u251c\u2500\u2500 build \u251c\u2500\u2500 CMakeLists.txt \u251c\u2500\u2500 plugins \u2502 \u251c\u2500\u2500 camera_ptz \u2502 \u2502 \u251c\u2500\u2500 CMakeLists.txt \u2502 \u2502 \u2514\u2500\u2500 ptz_plugin.cpp \u2502 \u2514\u2500\u2500 CMakeLists.txt \u251c\u2500\u2500 README.md \u2514\u2500\u2500 worlds \u2514\u2500\u2500 plug_teste.world","title":"Project structure"},{"location":"gazebo/plugins/hello_model_plugin/#cmakefiles-hierarchy","text":"root plugins for each plugin sub directory","title":"CMakefiles hierarchy"},{"location":"gazebo/plugins/hello_model_plugin/#root","text":"cmake_minimum_required ( VERSION 3 .0 ) project ( gz ) # Find Gazebo find_package ( gazebo REQUIRED ) include_directories ( ${ GAZEBO_INCLUDE_DIRS } ) link_directories ( ${ GAZEBO_LIBRARY_DIRS } ) set ( CMAKE_CXX_FLAGS \" ${ CMAKE_CXX_FLAGS } ${ GAZEBO_CXX_FLAGS } \" ) add_subdirectory ( plugins )","title":"root"},{"location":"gazebo/plugins/hello_model_plugin/#plugins","text":"This cmake file call other plugin cmake files add_subdirectory ( camera_ptz )","title":"plugins"},{"location":"gazebo/plugins/hello_model_plugin/#plugin","text":"add_library ( ptz_plugin SHARED ptz_plugin.cpp ) target_link_libraries ( ptz_plugin ${ GAZEBO_LIBRARIES } ) install ( TARGETS ptz_plugin DESTINATION ${ PROJECT_SOURCE_DIR } /bin )","title":"plugin"},{"location":"gazebo/plugins/hello_model_plugin/#plugin-code","text":"print log message to Console using gzdbg gzmsg gzwarn gzerr when running gazebo in verbose mode #include <functional> #include <gazebo/gazebo.hh> #include <gazebo/physics/physics.hh> #include <gazebo/common/common.hh> #include <ignition/math/Vector3.hh> namespace gazebo { class Ptz : public ModelPlugin { public : void Load ( physics :: ModelPtr _parent , sdf :: ElementPtr /*_sdf*/ ) { // Store the pointer to the model this -> model = _parent ; gzdbg << \"hello debug msg\" << std :: endl ; gzmsg << \"hello info msg\" << std :: endl ; gzwarn << \"hello warning msg\" << std :: endl ; gzerr << \"hello error msg\" << std :: endl ; // Listen to the update event. This event is broadcast every // simulation iteration. this -> updateConnection = event :: Events :: ConnectWorldUpdateBegin ( std :: bind ( & Ptz :: OnUpdate , this )); } // Called by the world update start event public : void OnUpdate () { } // Pointer to the model private : physics :: ModelPtr model ; // Pointer to the update event connection private : event :: ConnectionPtr updateConnection ; }; // Register this plugin with the simulator GZ_REGISTER_MODEL_PLUGIN ( Ptz ) }","title":"Plugin code"},{"location":"gazebo/plugins/hello_model_plugin/#world-example","text":"<?xml version=\"1.0\"?> <sdf version= \"1.4\" > <world name= \"default\" > <!-- Ground Plane --> <include> <uri> model://ground_plane </uri> </include> <include> <uri> model://sun </uri> </include> <model name= \"box\" > <pose> 0 0 0.5 0 0 0 </pose> <link name= \"link\" > <collision name= \"collision\" > <geometry> <box> <size> 1 1 1 </size> </box> </geometry> </collision> <visual name= \"visual\" > <geometry> <box> <size> 1 1 1 </size> </box> </geometry> </visual> </link> <plugin name= \"model_push\" filename= \"libptz_plugin.so\" /> </model> </world> </sdf>","title":"world example"},{"location":"gazebo/plugins/hello_model_plugin/#usage","text":"# dont forget add plugin `so` to GAZEBO_PLUGIN_PATH gazebo --verbose world/plug_test.world # Or use -s to load plugin gazebo --verbose -s bin/libptz_plugin.so worlds/plug_teste.world","title":"usage"},{"location":"gazebo/plugins/hello_model_ros2_plugin/","text":"ROS2 Gazebo Model plugin \u00b6 Create simple GAZEBO plugin as a ROS2 package Simple bind between ROS and gazebo ROS WS \u00b6 ros_ws \u251c\u2500\u2500 install \u2502 \u251c\u2500\u2500 mulecar_sim \u2502 \u2502 \u2514\u2500\u2500 worlds \u2502 \u2514\u2500\u2500 mulecar_plugins \u2502 \u2514\u2500\u2500 lib \u2502 \u2514\u2500\u2500 libgazebo_ros_simple.so (link to build folder) \u251c\u2500\u2500 build \u251c\u2500\u2500 log \u2514\u2500\u2500 src \u251c\u2500\u2500 mulecar_plugins \u2502 \u251c\u2500\u2500 CMakeLists.txt \u2502 \u251c\u2500\u2500 package.xml \u2502 \u251c\u2500\u2500 src \u2502 \u2502 \u2514\u2500\u2500 gazebo_ros_simple.cpp \u2502 \u2514\u2500\u2500 include \u2502 \u2514\u2500\u2500 gazebo_ros_simple.hpp \u2514\u2500\u2500 mulecar_sim \u251c\u2500\u2500 CMakeLists.txt \u251c\u2500\u2500 package.xml \u251c\u2500\u2500 worlds \u2502 \u2514\u2500\u2500 gazebo_ros_simple.world \u2514\u2500\u2500 launch \u2514\u2500\u2500 gazebo_ros_simple.launch.py ROS2 pkg \u00b6 sudo apt install ros-foxy-gazebo-ros # cmake file to work with gazebo sudo apt install ros-foxy-gazebo-dev mulecar_plugins \u00b6 Simple plugin demonstration how to subscribe to topic and send string msg. pkg files - Plugin header file - Plugin cpp file - CMakeLists.txt - package.xml Header (gazebo_ros_simple.hpp) \u00b6 #ifndef GAZEBO_PLUGINS__GAZEBO_ROS_SIMPLE_HPP_ #define GAZEBO_PLUGINS__GAZEBO_ROS_SIMPLE_HPP_ #include <gazebo/common/Plugin.hh> #include <std_msgs/msg/string.hpp> namespace gazebo_plugins { class GazeboRosSimplePrivate ; class GazeboRosSimple : public gazebo :: ModelPlugin { public : GazeboRosSimple (); virtual ~ GazeboRosSimple (); protected : void Load ( gazebo :: physics :: ModelPtr model , sdf :: ElementPtr sdf ) override ; virtual void OnUpdate (); private : void OnRosStringMsg ( const std_msgs :: msg :: String :: ConstSharedPtr msg ); std :: unique_ptr < GazeboRosSimplePrivate > impl_ ; }; } // namespace gazebo_plugins #endif CPP \u00b6 #include <gazebo_ros_simple.hpp> #include <gazebo_ros/node.hpp> #include <std_msgs/msg/string.hpp> #include <rclcpp/rclcpp.hpp> #include <string> const std :: string TOPIC = \"gazebo_ros_simple\" ; namespace gazebo_plugins { class GazeboRosSimplePrivate { public : /// A pointer to the GazeboROS node. gazebo_ros :: Node :: SharedPtr ros_node_ ; // Pointer to subscriber rclcpp :: Subscription < std_msgs :: msg :: String >:: SharedPtr string_sub_ ; // Pointer to the update event connection gazebo :: event :: ConnectionPtr update_connection_ ; }; GazeboRosSimple :: GazeboRosSimple () : impl_ ( std :: make_unique < GazeboRosSimplePrivate > ()) { } GazeboRosSimple ::~ GazeboRosSimple () { } void GazeboRosSimple :: Load ( gazebo :: physics :: ModelPtr model , sdf :: ElementPtr sdf ) { impl_ -> ros_node_ = gazebo_ros :: Node :: Get ( sdf ); // Get QoS profiles const gazebo_ros :: QoS & qos = impl_ -> ros_node_ -> get_qos (); impl_ -> string_sub_ = impl_ -> ros_node_ -> create_subscription < std_msgs :: msg :: String > ( TOPIC , qos . get_subscription_qos ( \"gazebo_ros_simple\" , rclcpp :: SystemDefaultsQoS ()), std :: bind ( & GazeboRosSimple :: OnRosStringMsg , this , std :: placeholders :: _1 )); // Callback on every iteration impl_ -> update_connection_ = gazebo :: event :: Events :: ConnectWorldUpdateBegin ( std :: bind ( & GazeboRosSimple :: OnUpdate , this )); } void GazeboRosSimple :: OnRosStringMsg ( const std_msgs :: msg :: String :: ConstSharedPtr msg ) { gzmsg << \"OnRosStringMsg\" << std :: endl ; RCLCPP_INFO ( impl_ -> ros_node_ -> get_logger (), msg -> data ); } void GazeboRosSimple :: OnUpdate () { } GZ_REGISTER_MODEL_PLUGIN ( GazeboRosSimple ) } // namespace gazebo_plugins CMakeLists.txt \u00b6 cmake_minimum_required ( VERSION 3 .5 ) project ( mulecar_plugins ) set ( CMAKE_CXX_STANDARD 14 ) if ( CMAKE_COMPILER_IS_GNUCXX OR CMAKE_CXX_COMPILER_ID MATCHES \"Clang\" ) add_compile_options ( -Wall -Wextra -Wpedantic ) endif () # find dependencies find_package ( ament_cmake REQUIRED ) find_package ( gazebo_dev REQUIRED ) find_package ( gazebo_ros REQUIRED ) find_package ( rclcpp REQUIRED ) find_package ( std_msgs REQUIRED ) # gazebo_ros_simple add_library ( gazebo_ros_simple SHARED src/gazebo_ros_simple.cpp ) target_include_directories ( gazebo_ros_simple PUBLIC include ) ament_target_dependencies ( gazebo_ros_simple \"gazebo_dev\" \"gazebo_ros\" \"std_msgs\" \"rclcpp\" ) install ( TARGETS gazebo_ros_simple ARCHIVE DESTINATION lib LIBRARY DESTINATION lib RUNTIME DESTINATION bin ) if ( BUILD_TESTING ) find_package ( ament_lint_auto REQUIRED ) ament_lint_auto_find_test_dependencies () endif () ament_package () package.xml \u00b6 <?xml version=\"1.0\"?> <?xml-model href=\"http://download.ros.org/schema/package_format3.xsd\" schematypens=\"http://www.w3.org/2001/XMLSchema\"?> <package format= \"3\" > <name> mulecar_plugins </name> <version> 0.0.1 </version> <description> TODO: Package description </description> <maintainer email= \"robobe2020@gmail.com\" > user </maintainer> <license> TODO: License declaration </license> <buildtool_depend> ament_cmake </buildtool_depend> <depend> std_msgs </depend> <build_depend> gazebo_dev </build_depend> <build_depend> gazebo_ros </build_depend> <build_depend> rclcpp </build_depend> <exec_depend> gazebo_dev </exec_depend> <exec_depend> gazebo_ros </exec_depend> <exec_depend> rclcpp </exec_depend> <test_depend> ament_lint_auto </test_depend> <test_depend> ament_lint_common </test_depend> <export> <build_type> ament_cmake </build_type> </export> </package> mulecar_sim \u00b6 World Launch world \u00b6 <?xml version=\"1.0\"?> <sdf version= \"1.4\" > <world name= \"default\" > <!-- Ground Plane --> <include> <uri> model://ground_plane </uri> </include> <include> <uri> model://sun </uri> </include> <model name= \"box\" > <pose> 0 0 0.5 0 0 0 </pose> <link name= \"link\" > <collision name= \"collision\" > <geometry> <box> <size> 1 1 1 </size> </box> </geometry> </collision> <visual name= \"visual\" > <geometry> <box> <size> 1 1 1 </size> </box> </geometry> </visual> </link> <plugin name= \"simple_plug\" filename= \"libgazebo_ros_simple.so\" /> </model> </world> </sdf> Test \u00b6 Run gazebo List Topics Pub and test Run gazebo \u00b6 # from ws root folder gazebo --verbose -s install/mulecar_plugins/lib/libgazebo_ros_simple.so src/mulecar_sim/worlds/plug_test.world List Topics \u00b6 ros2 topic list # Result /clock /gazebo_ros_simple /parameter_events /rosout Pub and Test \u00b6 ros2 topic pub --once /gazebo_ros_simple std_msgs/msg/String \"{data: 'hello gazebo'}\" # Result publisher: beginning loop publishing #1: std_msgs.msg.String(data='hello gazebo') View gazebo verbose log \u00b6 ... [Msg] OnRosStringMsg [INFO] [1634791768.355582634] [simple_plug]: hello gazebo using launch file \u00b6 import os from ament_index_python.packages import get_package_share_directory , get_package_prefix from launch import LaunchDescription from launch import logging from launch.actions import ExecuteProcess world_prefix = get_package_share_directory ( \"mulecar_sim\" ) plugins = get_package_prefix ( \"mulecar_plugins\" ) world_file = os . path . join ( world_prefix , \"worlds\" , \"plug_test.world\" ) plugins_path = os . path . join ( world_prefix , \"lib\" ) log = logging . get_logger ( __name__ ) log . info ( get_package_prefix ( \"mulecar_plugins\" )) def generate_launch_description (): env = { \"GAZEBO_MODEL_PATH\" : os . environ [ \"GAZEBO_MODEL_PATH\" ], \"GAZEBO_PLUGIN_PATH\" : os . environ [ \"GAZEBO_PLUGIN_PATH\" ] + os . pathsep + plugins_path , \"GAZEBO_RESOURCE_PATH\" : os . environ [ \"GAZEBO_RESOURCE_PATH\" ], } return LaunchDescription ( [ ExecuteProcess ( cmd = [ \"gazebo\" , \"--verbose\" , \"-s\" , \"libgazebo_ros_simple.so\" , world_file ], output = \"screen\" , additional_env = env ) ] ) Note When launch from ROS gazebo alert [gazebo-1] [Err] [gazebo_shared.cc:46] System is attempting to load a plugin, but detected an incorrect plugin type The plugin run correctly todo: Need more research","title":"ROS2 Gazebo Model plugin"},{"location":"gazebo/plugins/hello_model_ros2_plugin/#ros2-gazebo-model-plugin","text":"Create simple GAZEBO plugin as a ROS2 package Simple bind between ROS and gazebo","title":"ROS2 Gazebo Model plugin"},{"location":"gazebo/plugins/hello_model_ros2_plugin/#ros-ws","text":"ros_ws \u251c\u2500\u2500 install \u2502 \u251c\u2500\u2500 mulecar_sim \u2502 \u2502 \u2514\u2500\u2500 worlds \u2502 \u2514\u2500\u2500 mulecar_plugins \u2502 \u2514\u2500\u2500 lib \u2502 \u2514\u2500\u2500 libgazebo_ros_simple.so (link to build folder) \u251c\u2500\u2500 build \u251c\u2500\u2500 log \u2514\u2500\u2500 src \u251c\u2500\u2500 mulecar_plugins \u2502 \u251c\u2500\u2500 CMakeLists.txt \u2502 \u251c\u2500\u2500 package.xml \u2502 \u251c\u2500\u2500 src \u2502 \u2502 \u2514\u2500\u2500 gazebo_ros_simple.cpp \u2502 \u2514\u2500\u2500 include \u2502 \u2514\u2500\u2500 gazebo_ros_simple.hpp \u2514\u2500\u2500 mulecar_sim \u251c\u2500\u2500 CMakeLists.txt \u251c\u2500\u2500 package.xml \u251c\u2500\u2500 worlds \u2502 \u2514\u2500\u2500 gazebo_ros_simple.world \u2514\u2500\u2500 launch \u2514\u2500\u2500 gazebo_ros_simple.launch.py","title":"ROS WS"},{"location":"gazebo/plugins/hello_model_ros2_plugin/#ros2-pkg","text":"sudo apt install ros-foxy-gazebo-ros # cmake file to work with gazebo sudo apt install ros-foxy-gazebo-dev","title":"ROS2 pkg"},{"location":"gazebo/plugins/hello_model_ros2_plugin/#mulecar_plugins","text":"Simple plugin demonstration how to subscribe to topic and send string msg. pkg files - Plugin header file - Plugin cpp file - CMakeLists.txt - package.xml","title":"mulecar_plugins"},{"location":"gazebo/plugins/hello_model_ros2_plugin/#header-gazebo_ros_simplehpp","text":"#ifndef GAZEBO_PLUGINS__GAZEBO_ROS_SIMPLE_HPP_ #define GAZEBO_PLUGINS__GAZEBO_ROS_SIMPLE_HPP_ #include <gazebo/common/Plugin.hh> #include <std_msgs/msg/string.hpp> namespace gazebo_plugins { class GazeboRosSimplePrivate ; class GazeboRosSimple : public gazebo :: ModelPlugin { public : GazeboRosSimple (); virtual ~ GazeboRosSimple (); protected : void Load ( gazebo :: physics :: ModelPtr model , sdf :: ElementPtr sdf ) override ; virtual void OnUpdate (); private : void OnRosStringMsg ( const std_msgs :: msg :: String :: ConstSharedPtr msg ); std :: unique_ptr < GazeboRosSimplePrivate > impl_ ; }; } // namespace gazebo_plugins #endif","title":"Header (gazebo_ros_simple.hpp)"},{"location":"gazebo/plugins/hello_model_ros2_plugin/#cpp","text":"#include <gazebo_ros_simple.hpp> #include <gazebo_ros/node.hpp> #include <std_msgs/msg/string.hpp> #include <rclcpp/rclcpp.hpp> #include <string> const std :: string TOPIC = \"gazebo_ros_simple\" ; namespace gazebo_plugins { class GazeboRosSimplePrivate { public : /// A pointer to the GazeboROS node. gazebo_ros :: Node :: SharedPtr ros_node_ ; // Pointer to subscriber rclcpp :: Subscription < std_msgs :: msg :: String >:: SharedPtr string_sub_ ; // Pointer to the update event connection gazebo :: event :: ConnectionPtr update_connection_ ; }; GazeboRosSimple :: GazeboRosSimple () : impl_ ( std :: make_unique < GazeboRosSimplePrivate > ()) { } GazeboRosSimple ::~ GazeboRosSimple () { } void GazeboRosSimple :: Load ( gazebo :: physics :: ModelPtr model , sdf :: ElementPtr sdf ) { impl_ -> ros_node_ = gazebo_ros :: Node :: Get ( sdf ); // Get QoS profiles const gazebo_ros :: QoS & qos = impl_ -> ros_node_ -> get_qos (); impl_ -> string_sub_ = impl_ -> ros_node_ -> create_subscription < std_msgs :: msg :: String > ( TOPIC , qos . get_subscription_qos ( \"gazebo_ros_simple\" , rclcpp :: SystemDefaultsQoS ()), std :: bind ( & GazeboRosSimple :: OnRosStringMsg , this , std :: placeholders :: _1 )); // Callback on every iteration impl_ -> update_connection_ = gazebo :: event :: Events :: ConnectWorldUpdateBegin ( std :: bind ( & GazeboRosSimple :: OnUpdate , this )); } void GazeboRosSimple :: OnRosStringMsg ( const std_msgs :: msg :: String :: ConstSharedPtr msg ) { gzmsg << \"OnRosStringMsg\" << std :: endl ; RCLCPP_INFO ( impl_ -> ros_node_ -> get_logger (), msg -> data ); } void GazeboRosSimple :: OnUpdate () { } GZ_REGISTER_MODEL_PLUGIN ( GazeboRosSimple ) } // namespace gazebo_plugins","title":"CPP"},{"location":"gazebo/plugins/hello_model_ros2_plugin/#cmakeliststxt","text":"cmake_minimum_required ( VERSION 3 .5 ) project ( mulecar_plugins ) set ( CMAKE_CXX_STANDARD 14 ) if ( CMAKE_COMPILER_IS_GNUCXX OR CMAKE_CXX_COMPILER_ID MATCHES \"Clang\" ) add_compile_options ( -Wall -Wextra -Wpedantic ) endif () # find dependencies find_package ( ament_cmake REQUIRED ) find_package ( gazebo_dev REQUIRED ) find_package ( gazebo_ros REQUIRED ) find_package ( rclcpp REQUIRED ) find_package ( std_msgs REQUIRED ) # gazebo_ros_simple add_library ( gazebo_ros_simple SHARED src/gazebo_ros_simple.cpp ) target_include_directories ( gazebo_ros_simple PUBLIC include ) ament_target_dependencies ( gazebo_ros_simple \"gazebo_dev\" \"gazebo_ros\" \"std_msgs\" \"rclcpp\" ) install ( TARGETS gazebo_ros_simple ARCHIVE DESTINATION lib LIBRARY DESTINATION lib RUNTIME DESTINATION bin ) if ( BUILD_TESTING ) find_package ( ament_lint_auto REQUIRED ) ament_lint_auto_find_test_dependencies () endif () ament_package ()","title":"CMakeLists.txt"},{"location":"gazebo/plugins/hello_model_ros2_plugin/#packagexml","text":"<?xml version=\"1.0\"?> <?xml-model href=\"http://download.ros.org/schema/package_format3.xsd\" schematypens=\"http://www.w3.org/2001/XMLSchema\"?> <package format= \"3\" > <name> mulecar_plugins </name> <version> 0.0.1 </version> <description> TODO: Package description </description> <maintainer email= \"robobe2020@gmail.com\" > user </maintainer> <license> TODO: License declaration </license> <buildtool_depend> ament_cmake </buildtool_depend> <depend> std_msgs </depend> <build_depend> gazebo_dev </build_depend> <build_depend> gazebo_ros </build_depend> <build_depend> rclcpp </build_depend> <exec_depend> gazebo_dev </exec_depend> <exec_depend> gazebo_ros </exec_depend> <exec_depend> rclcpp </exec_depend> <test_depend> ament_lint_auto </test_depend> <test_depend> ament_lint_common </test_depend> <export> <build_type> ament_cmake </build_type> </export> </package>","title":"package.xml"},{"location":"gazebo/plugins/hello_model_ros2_plugin/#mulecar_sim","text":"World Launch","title":"mulecar_sim"},{"location":"gazebo/plugins/hello_model_ros2_plugin/#world","text":"<?xml version=\"1.0\"?> <sdf version= \"1.4\" > <world name= \"default\" > <!-- Ground Plane --> <include> <uri> model://ground_plane </uri> </include> <include> <uri> model://sun </uri> </include> <model name= \"box\" > <pose> 0 0 0.5 0 0 0 </pose> <link name= \"link\" > <collision name= \"collision\" > <geometry> <box> <size> 1 1 1 </size> </box> </geometry> </collision> <visual name= \"visual\" > <geometry> <box> <size> 1 1 1 </size> </box> </geometry> </visual> </link> <plugin name= \"simple_plug\" filename= \"libgazebo_ros_simple.so\" /> </model> </world> </sdf>","title":"world"},{"location":"gazebo/plugins/hello_model_ros2_plugin/#test","text":"Run gazebo List Topics Pub and test","title":"Test"},{"location":"gazebo/plugins/hello_model_ros2_plugin/#run-gazebo","text":"# from ws root folder gazebo --verbose -s install/mulecar_plugins/lib/libgazebo_ros_simple.so src/mulecar_sim/worlds/plug_test.world","title":"Run gazebo"},{"location":"gazebo/plugins/hello_model_ros2_plugin/#list-topics","text":"ros2 topic list # Result /clock /gazebo_ros_simple /parameter_events /rosout","title":"List Topics"},{"location":"gazebo/plugins/hello_model_ros2_plugin/#pub-and-test","text":"ros2 topic pub --once /gazebo_ros_simple std_msgs/msg/String \"{data: 'hello gazebo'}\" # Result publisher: beginning loop publishing #1: std_msgs.msg.String(data='hello gazebo')","title":"Pub and Test"},{"location":"gazebo/plugins/hello_model_ros2_plugin/#view-gazebo-verbose-log","text":"... [Msg] OnRosStringMsg [INFO] [1634791768.355582634] [simple_plug]: hello gazebo","title":"View gazebo verbose log"},{"location":"gazebo/plugins/hello_model_ros2_plugin/#using-launch-file","text":"import os from ament_index_python.packages import get_package_share_directory , get_package_prefix from launch import LaunchDescription from launch import logging from launch.actions import ExecuteProcess world_prefix = get_package_share_directory ( \"mulecar_sim\" ) plugins = get_package_prefix ( \"mulecar_plugins\" ) world_file = os . path . join ( world_prefix , \"worlds\" , \"plug_test.world\" ) plugins_path = os . path . join ( world_prefix , \"lib\" ) log = logging . get_logger ( __name__ ) log . info ( get_package_prefix ( \"mulecar_plugins\" )) def generate_launch_description (): env = { \"GAZEBO_MODEL_PATH\" : os . environ [ \"GAZEBO_MODEL_PATH\" ], \"GAZEBO_PLUGIN_PATH\" : os . environ [ \"GAZEBO_PLUGIN_PATH\" ] + os . pathsep + plugins_path , \"GAZEBO_RESOURCE_PATH\" : os . environ [ \"GAZEBO_RESOURCE_PATH\" ], } return LaunchDescription ( [ ExecuteProcess ( cmd = [ \"gazebo\" , \"--verbose\" , \"-s\" , \"libgazebo_ros_simple.so\" , world_file ], output = \"screen\" , additional_env = env ) ] ) Note When launch from ROS gazebo alert [gazebo-1] [Err] [gazebo_shared.cc:46] System is attempting to load a plugin, but detected an incorrect plugin type The plugin run correctly todo: Need more research","title":"using launch file"},{"location":"gazebo/robot/urdf_sdf/","text":"URDF and XACRO \u00b6 Using URDF Launch nodel from cli Launch gazebo and spawn model Prerequisite \u00b6 sudo apt install ros-foxy-urdf sudo apt install ros-foxy-xacro Create pkg \u00b6 ros2 pkg create --build-type ament_cmake mulecar_description Launch and Spawn \u00b6 cli \u00b6 launch gazebo ros2 launch gazebo_ros gazebo.launch.py spawn model ros2 run gazebo_ros spawn_entity.py -entity my_robot1 -file <>/basic.urdf entity: model name file: file location URDF minimal \u00b6 <?xml version=\"1.0\"?> <robot name= \"myfirst\" > <link name= \"base_link\" > <inertial> <origin xyz= \"0 0 0\" rpy= \"0 0 0\" /> <mass value= \"5\" /> <inertia ixx= \" 0.116667 \" ixy= \"0.0\" ixz= \"0.0\" iyy= \" 0.116667 \" iyz= \"0.0\" izz= \"0.025\" /> </inertial> <collision> <origin xyz= \"0 0 0\" rpy= \"0 0 0\" /> <geometry> <cylinder radius= \"0.1\" length= \"0.5\" /> </geometry> </collision> <visual> <origin rpy= \"0.0 0 0\" xyz= \"0 0 0\" /> <geometry> <cylinder radius= \"0.1\" length= \"0.5\" /> </geometry> </visual> </link> </robot> inertial \u00b6 online calculator Launch and Spawn \u00b6 using ROS2 launch file to launch gazebo and spawn model launch file 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 import os from ament_index_python.packages import get_package_share_directory from launch import LaunchDescription from launch.actions import DeclareLaunchArgument , ExecuteProcess from launch.substitutions import LaunchConfiguration from launch_ros.actions import Node from launch import logging log = logging . get_logger ( __name__ ) def generate_launch_description (): urdf_file_name = 'urdf/basic.urdf' urdf = os . path . join ( get_package_share_directory ( 'mulecar_description' ), urdf_file_name ) log . warning ( urdf ) return LaunchDescription ([ ExecuteProcess ( cmd = [ \"gazebo\" , \"-s\" , \"libgazebo_ros_init.so\" , \"-s\" , \"libgazebo_ros_factory.so\" ], output = \"screen\" ), Node ( package = 'gazebo_ros' , executable = 'spawn_entity.py' , name = 'urdf_spawner' , output = 'screen' , arguments = [ \"-file\" , urdf , \"-entity\" , \"my\" ]) ]) :libgazebo_ros_init: :libgazebo_ros_factory: :spawn robot from file: XACRO \u00b6 sudo apt install ros-foxy-xacro macro file \u00b6 inertia macro file <?xml version=\"1.0\"?> <robot xmlns:xacro= \"http://www.ros.org/wiki/xacro\" > <xacro:macro name= \"cylinder_inertia\" params= \"m r h\" > <inertia ixx= \"${m*(3*r*r+h*h)/12}\" ixy = \"0\" ixz = \"0\" iyy= \"${m*(3*r*r+h*h)/12}\" iyz = \"0\" izz= \"${m*r*r/2}\" /> </xacro:macro> </robot> xacro file \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 <?xml version=\"1.0\"?> <robot name= \"myfirst\" xmlns:xacro= \"http://www.ros.org/wiki/xacro\" > > <xacro:include filename= \"$(find mulecar_description)/urdf/macros.xacro\" /> <xacro:property name= \"radius\" value= \"0.1\" /> <xacro:property name= \"height\" value= \"0.5\" /> <link name= \"base_link\" > <inertial> <origin xyz= \"0 0 0\" rpy= \"0 0 0\" /> <mass value= \"5\" /> <xacro:cylinder_inertia m= \"5\" r= \"${radius}\" h= \"${height}\" /> </inertial> <collision> <origin xyz= \"0 0 0\" rpy= \"0 0 0\" /> <geometry> <cylinder radius= \"${radius}\" length= \"${height}\" /> </geometry> </collision> <visual> <origin rpy= \"0.0 0 0\" xyz= \"0 0 0\" /> <geometry> <cylinder radius= \"${radius}\" length= \"${height}\" /> </geometry> </visual> </link> </robot> cli usage \u00b6 xacro installed as a part of ros-foxy-xacro package xacro basic.urdf.xacro launch \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 import os from ament_index_python.packages import get_package_share_directory from launch import LaunchDescription from launch.actions import DeclareLaunchArgument , ExecuteProcess from launch.substitutions import LaunchConfiguration from launch_ros.actions import Node from launch import logging from launch.substitutions import Command import xacro log = logging . get_logger ( __name__ ) def generate_launch_description (): xacro_file_name = 'urdf/basic.urdf.xacro' xacro_file = os . path . join ( get_package_share_directory ( 'mulecar_description' ), xacro_file_name ) doc = xacro . parse ( open ( xacro_file )) xacro . process_doc ( doc ) params = { 'robot_description' : doc . toxml ()} return LaunchDescription ([ ExecuteProcess ( cmd = [ \"gazebo\" , \"-s\" , \"libgazebo_ros_init.so\" , \"-s\" , \"libgazebo_ros_factory.so\" ], output = \"screen\" ), Node ( package = 'robot_state_publisher' , executable = 'robot_state_publisher' , output = 'screen' , parameters = [ params ] ), Node ( package = 'gazebo_ros' , executable = 'spawn_entity.py' , name = 'urdf_spawner' , output = 'screen' , arguments = [ '-topic' , 'robot_description' , \"-entity\" , \"my\" ]) ])","title":"URDF and XACRO"},{"location":"gazebo/robot/urdf_sdf/#urdf-and-xacro","text":"Using URDF Launch nodel from cli Launch gazebo and spawn model","title":"URDF and XACRO"},{"location":"gazebo/robot/urdf_sdf/#prerequisite","text":"sudo apt install ros-foxy-urdf sudo apt install ros-foxy-xacro","title":"Prerequisite"},{"location":"gazebo/robot/urdf_sdf/#create-pkg","text":"ros2 pkg create --build-type ament_cmake mulecar_description","title":"Create pkg"},{"location":"gazebo/robot/urdf_sdf/#launch-and-spawn","text":"","title":"Launch and Spawn"},{"location":"gazebo/robot/urdf_sdf/#cli","text":"launch gazebo ros2 launch gazebo_ros gazebo.launch.py spawn model ros2 run gazebo_ros spawn_entity.py -entity my_robot1 -file <>/basic.urdf entity: model name file: file location","title":"cli"},{"location":"gazebo/robot/urdf_sdf/#urdf-minimal","text":"<?xml version=\"1.0\"?> <robot name= \"myfirst\" > <link name= \"base_link\" > <inertial> <origin xyz= \"0 0 0\" rpy= \"0 0 0\" /> <mass value= \"5\" /> <inertia ixx= \" 0.116667 \" ixy= \"0.0\" ixz= \"0.0\" iyy= \" 0.116667 \" iyz= \"0.0\" izz= \"0.025\" /> </inertial> <collision> <origin xyz= \"0 0 0\" rpy= \"0 0 0\" /> <geometry> <cylinder radius= \"0.1\" length= \"0.5\" /> </geometry> </collision> <visual> <origin rpy= \"0.0 0 0\" xyz= \"0 0 0\" /> <geometry> <cylinder radius= \"0.1\" length= \"0.5\" /> </geometry> </visual> </link> </robot>","title":"URDF minimal"},{"location":"gazebo/robot/urdf_sdf/#inertial","text":"online calculator","title":"inertial"},{"location":"gazebo/robot/urdf_sdf/#launch-and-spawn_1","text":"using ROS2 launch file to launch gazebo and spawn model launch file 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 import os from ament_index_python.packages import get_package_share_directory from launch import LaunchDescription from launch.actions import DeclareLaunchArgument , ExecuteProcess from launch.substitutions import LaunchConfiguration from launch_ros.actions import Node from launch import logging log = logging . get_logger ( __name__ ) def generate_launch_description (): urdf_file_name = 'urdf/basic.urdf' urdf = os . path . join ( get_package_share_directory ( 'mulecar_description' ), urdf_file_name ) log . warning ( urdf ) return LaunchDescription ([ ExecuteProcess ( cmd = [ \"gazebo\" , \"-s\" , \"libgazebo_ros_init.so\" , \"-s\" , \"libgazebo_ros_factory.so\" ], output = \"screen\" ), Node ( package = 'gazebo_ros' , executable = 'spawn_entity.py' , name = 'urdf_spawner' , output = 'screen' , arguments = [ \"-file\" , urdf , \"-entity\" , \"my\" ]) ]) :libgazebo_ros_init: :libgazebo_ros_factory: :spawn robot from file:","title":"Launch and Spawn"},{"location":"gazebo/robot/urdf_sdf/#xacro","text":"sudo apt install ros-foxy-xacro","title":"XACRO"},{"location":"gazebo/robot/urdf_sdf/#macro-file","text":"inertia macro file <?xml version=\"1.0\"?> <robot xmlns:xacro= \"http://www.ros.org/wiki/xacro\" > <xacro:macro name= \"cylinder_inertia\" params= \"m r h\" > <inertia ixx= \"${m*(3*r*r+h*h)/12}\" ixy = \"0\" ixz = \"0\" iyy= \"${m*(3*r*r+h*h)/12}\" iyz = \"0\" izz= \"${m*r*r/2}\" /> </xacro:macro> </robot>","title":"macro file"},{"location":"gazebo/robot/urdf_sdf/#xacro-file","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 <?xml version=\"1.0\"?> <robot name= \"myfirst\" xmlns:xacro= \"http://www.ros.org/wiki/xacro\" > > <xacro:include filename= \"$(find mulecar_description)/urdf/macros.xacro\" /> <xacro:property name= \"radius\" value= \"0.1\" /> <xacro:property name= \"height\" value= \"0.5\" /> <link name= \"base_link\" > <inertial> <origin xyz= \"0 0 0\" rpy= \"0 0 0\" /> <mass value= \"5\" /> <xacro:cylinder_inertia m= \"5\" r= \"${radius}\" h= \"${height}\" /> </inertial> <collision> <origin xyz= \"0 0 0\" rpy= \"0 0 0\" /> <geometry> <cylinder radius= \"${radius}\" length= \"${height}\" /> </geometry> </collision> <visual> <origin rpy= \"0.0 0 0\" xyz= \"0 0 0\" /> <geometry> <cylinder radius= \"${radius}\" length= \"${height}\" /> </geometry> </visual> </link> </robot>","title":"xacro file"},{"location":"gazebo/robot/urdf_sdf/#cli-usage","text":"xacro installed as a part of ros-foxy-xacro package xacro basic.urdf.xacro","title":"cli usage"},{"location":"gazebo/robot/urdf_sdf/#launch","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 import os from ament_index_python.packages import get_package_share_directory from launch import LaunchDescription from launch.actions import DeclareLaunchArgument , ExecuteProcess from launch.substitutions import LaunchConfiguration from launch_ros.actions import Node from launch import logging from launch.substitutions import Command import xacro log = logging . get_logger ( __name__ ) def generate_launch_description (): xacro_file_name = 'urdf/basic.urdf.xacro' xacro_file = os . path . join ( get_package_share_directory ( 'mulecar_description' ), xacro_file_name ) doc = xacro . parse ( open ( xacro_file )) xacro . process_doc ( doc ) params = { 'robot_description' : doc . toxml ()} return LaunchDescription ([ ExecuteProcess ( cmd = [ \"gazebo\" , \"-s\" , \"libgazebo_ros_init.so\" , \"-s\" , \"libgazebo_ros_factory.so\" ], output = \"screen\" ), Node ( package = 'robot_state_publisher' , executable = 'robot_state_publisher' , output = 'screen' , parameters = [ params ] ), Node ( package = 'gazebo_ros' , executable = 'spawn_entity.py' , name = 'urdf_spawner' , output = 'screen' , arguments = [ '-topic' , 'robot_description' , \"-entity\" , \"my\" ]) ])","title":"launch"},{"location":"resources/apps/","text":"App and Tools \u00b6 meld - diff tool \u00b6 sudo apt install meld balena Ether \u00b6 Download","title":"App and Tools"},{"location":"resources/apps/#app-and-tools","text":"","title":"App and Tools"},{"location":"resources/apps/#meld-diff-tool","text":"sudo apt install meld","title":"meld - diff tool"},{"location":"resources/apps/#balena-ether","text":"Download","title":"balena Ether"},{"location":"resources/mkdocs/","text":"Setup mkdocs \u00b6 Pip \u00b6 mkdocs-material mkdocs-include-markdown-plugin #mkdocs #mkdocs-material-extensions Docs folder struct \u00b6 \u2514\u2500\u2500 docs \u251c\u2500\u2500 img \u2502 \u2514\u2500\u2500 course.png Basic mkdocs config \u00b6 site_name: ROS Coockbook theme: name: material nav: - Home: index.md - Launch: basics.md - Gazebo: - Spwan: wines.md - Camera: wine.md - LIDAR: tastings.md - ROS2: addresses.md - Msg: msg.md - Resources: resources.md - About: about.md markdown_extensions: - attr_list - pymdownx.caret - pymdownx.highlight - pymdownx.inlinehilite - pymdownx.tabbed: alternate_style: true - pymdownx.tasklist: custom_checkbox: true - pymdownx.snippets plugins: - include-markdown Mkdocs commands \u00b6 mkdocs serve mkdocs build --clean mkdocs gh-deploy Deploy to git hub \u00b6 In repository settings select pages Set source to branch gh-pages and folder to /root Extentions \u00b6 attr_list \u00b6 Allows to add HTML attributes and CSS classes to Markdown elements markdown_extensions: - attr_list control image width and height ![](../img/course.png){ width=200, height=50) } Code block \u00b6 markdown_extensions: - pymdownx.snippets usage \u00b6 Heightlite code \u00b6 markdown_extensions: - pymdownx.highlight - pymdownx.superfences usage \u00b6 > ```python hl_lines=\"2\" import os print(\"hightlite line\") > ``` result \u00b6 import os print ( \"hightlite line\" ) Add line numbers \u00b6 usage \u00b6 > ```python linenums=\"1\" import os print(\"hightlite line\") > ``` images \u00b6 ![](../img/course.png){ width=200, height=50) } Plugins \u00b6 mkdocs-include-markdown-plugin \u00b6 project readme {% include-markdown \"../README.md\" %} Resources \u00b6 plugins","title":"Setup mkdocs"},{"location":"resources/mkdocs/#setup-mkdocs","text":"","title":"Setup mkdocs"},{"location":"resources/mkdocs/#pip","text":"mkdocs-material mkdocs-include-markdown-plugin #mkdocs #mkdocs-material-extensions","title":"Pip"},{"location":"resources/mkdocs/#docs-folder-struct","text":"\u2514\u2500\u2500 docs \u251c\u2500\u2500 img \u2502 \u2514\u2500\u2500 course.png","title":"Docs folder struct"},{"location":"resources/mkdocs/#basic-mkdocs-config","text":"site_name: ROS Coockbook theme: name: material nav: - Home: index.md - Launch: basics.md - Gazebo: - Spwan: wines.md - Camera: wine.md - LIDAR: tastings.md - ROS2: addresses.md - Msg: msg.md - Resources: resources.md - About: about.md markdown_extensions: - attr_list - pymdownx.caret - pymdownx.highlight - pymdownx.inlinehilite - pymdownx.tabbed: alternate_style: true - pymdownx.tasklist: custom_checkbox: true - pymdownx.snippets plugins: - include-markdown","title":"Basic mkdocs config"},{"location":"resources/mkdocs/#mkdocs-commands","text":"mkdocs serve mkdocs build --clean mkdocs gh-deploy","title":"Mkdocs commands"},{"location":"resources/mkdocs/#deploy-to-git-hub","text":"In repository settings select pages Set source to branch gh-pages and folder to /root","title":"Deploy to git hub"},{"location":"resources/mkdocs/#extentions","text":"","title":"Extentions"},{"location":"resources/mkdocs/#attr_list","text":"Allows to add HTML attributes and CSS classes to Markdown elements markdown_extensions: - attr_list control image width and height ![](../img/course.png){ width=200, height=50) }","title":"attr_list"},{"location":"resources/mkdocs/#code-block","text":"markdown_extensions: - pymdownx.snippets","title":"Code block"},{"location":"resources/mkdocs/#usage","text":"","title":"usage"},{"location":"resources/mkdocs/#heightlite-code","text":"markdown_extensions: - pymdownx.highlight - pymdownx.superfences","title":"Heightlite code"},{"location":"resources/mkdocs/#usage_1","text":"> ```python hl_lines=\"2\" import os print(\"hightlite line\") > ```","title":"usage"},{"location":"resources/mkdocs/#result","text":"import os print ( \"hightlite line\" )","title":"result"},{"location":"resources/mkdocs/#add-line-numbers","text":"","title":"Add line numbers"},{"location":"resources/mkdocs/#usage_2","text":"> ```python linenums=\"1\" import os print(\"hightlite line\") > ```","title":"usage"},{"location":"resources/mkdocs/#images","text":"![](../img/course.png){ width=200, height=50) }","title":"images"},{"location":"resources/mkdocs/#plugins","text":"","title":"Plugins"},{"location":"resources/mkdocs/#mkdocs-include-markdown-plugin","text":"project readme {% include-markdown \"../README.md\" %}","title":"mkdocs-include-markdown-plugin"},{"location":"resources/mkdocs/#resources","text":"plugins","title":"Resources"},{"location":"resources/pc/","text":"| model | cpu | screen | price | Link | | :--------------------: | :-------: | :----: | :-------: | ---------------------------------------------------- | --- | ----| ---| | zenbook UX393EA-HK001T | i7-1165G7 | 13.9 | 6290/5376 | https://www.ivory.co.il/catalog.php?id=37154&iszap=1 | 1TB | 16 LPDDR4x | Iris XE | | UX435EG-K9175T | i7-1165G7 | 14 | 5990/5119 | https://www.ivory.co.il/catalog.php?id=40862 | 1TB | 16 LPDDR4x | MX450 | | UX325EA-XS74 | i7-1165G7 | 14 | 4185 | https://www.amazon.com/ASUS-Ultra-Slim-i7-1165G7-Thunderbolt-UX325EA-XS74/dp/B08XBF1269/ref=psdc_13896615011_t1_B08KH3Z5WW?th=1 | 512 | 16 LPDDR4x | MX450 | | UX435EG-XH74 | i7-1165G7 | 14 | 4390 | https://www.amazon.com/ASUS-Ultra-Slim-i7-1165G7-Thunderbolt-UX435EG-XH74/dp/B08KH3Z5WW/ref=sr_1_3?crid=29JLUAN3COPT6&keywords=ux435egl&qid=1636195455&qsid=147-3086202-5943011&sprefix=UX435EGL%2Caps%2C296&sr=8-3&sres=B08KH3Z5WW%2CB07F3KBQ68%2CB07PQ757HX%2CB08PCNJYF9%2CB07CLZ3D85%2CB07H2ZG1J2%2CB075D7BZBR%2CB09JV84HPJ%2CB01HGJ07B4%2CB07CVGN1YX%2CB07Y1TZSNM%2CB09JSNPP2F%2CB09JSDRYBZ%2CB07F3WH613%2CB09JVW7GH5%2CB00MZEML4C&srpt=NOTEBOOK_COMPUTER&th=1 | 512 | 16 LPDDR4x | iris | OLED","title":"Pc"},{"location":"resources/vscode_ext/","text":"VSCode top extenuations \u00b6 Prettier - Code formatter \u00b6 marketplace","title":"VSCode top extenuations"},{"location":"resources/vscode_ext/#vscode-top-extenuations","text":"","title":"VSCode top extenuations"},{"location":"resources/vscode_ext/#prettier-code-formatter","text":"marketplace","title":"Prettier - Code formatter"},{"location":"resources/plugins/tags/","text":"source Note Don't live empty line in the page tag header this plug in throw unhandled exceptions install \u00b6 pip install git+https://github.com/jldiaz/mkdocs-plugin-tags.git usages \u00b6 mkdocs.yaml \u00b6 plugins : - tags page \u00b6 Add to page header --- title: node template tags: - nodes - log ---","title":"Tags"},{"location":"resources/plugins/tags/#install","text":"pip install git+https://github.com/jldiaz/mkdocs-plugin-tags.git","title":"install"},{"location":"resources/plugins/tags/#usages","text":"","title":"usages"},{"location":"resources/plugins/tags/#mkdocsyaml","text":"plugins : - tags","title":"mkdocs.yaml"},{"location":"resources/plugins/tags/#page","text":"Add to page header --- title: node template tags: - nodes - log ---","title":"page"},{"location":"ros2/","text":"ROS2 \u00b6 Reference \u00b6 ROS2 Demos","title":"ROS2"},{"location":"ros2/#ros2","text":"","title":"ROS2"},{"location":"ros2/#reference","text":"ROS2 Demos","title":"Reference"},{"location":"ros2/launch/","text":"Launch file \u00b6 Python package \u00b6 ros2 pkg_create --build-type ament_python <pkg-name> launch file \u00b6 1 2 3 4 5 6 7 8 9 from launch import LaunchDescription import launch_ros.actions def generate_launch_description (): return LaunchDescription ([ launch_ros . actions . Node ( package = 'mulecar' , executable = 'pub' , output = 'screen' )]) setup.py \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 from setuptools import setup from glob import glob import os package_name = 'mulecar' setup ( name = package_name , version = '0.0.0' , packages = [ package_name ], data_files = [ ( 'share/ament_index/resource_index/packages' , [ 'resource/' + package_name ]), ( os . path . join ( 'share' , package_name ), [ 'package.xml' ]), ( os . path . join ( 'share' , package_name ), glob ( 'launch/*.launch.py' )), ], install_requires = [ 'setuptools' ], zip_safe = True , maintainer = 'user' , maintainer_email = 'robobe2020@gmail.com' , entry_points = { 'console_scripts' : [ 'pub = mulecar.publisher:main' ], }, ) (line 14) Copy launch files to install folder (line 22) Node entry point call by the launch file launch_ros.actions.Node method argument executable Build and Run \u00b6 colcon build --symlink-install --packages-select <pkg_name> source install/setup.bash ros2 launch <pkg_name> <launc_file>.launch.py Resources \u00b6 Launching/monitoring multiple nodes with Launch","title":"Launch file"},{"location":"ros2/launch/#launch-file","text":"","title":"Launch file"},{"location":"ros2/launch/#python-package","text":"ros2 pkg_create --build-type ament_python <pkg-name>","title":"Python package"},{"location":"ros2/launch/#launch-file_1","text":"1 2 3 4 5 6 7 8 9 from launch import LaunchDescription import launch_ros.actions def generate_launch_description (): return LaunchDescription ([ launch_ros . actions . Node ( package = 'mulecar' , executable = 'pub' , output = 'screen' )])","title":"launch file"},{"location":"ros2/launch/#setuppy","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 from setuptools import setup from glob import glob import os package_name = 'mulecar' setup ( name = package_name , version = '0.0.0' , packages = [ package_name ], data_files = [ ( 'share/ament_index/resource_index/packages' , [ 'resource/' + package_name ]), ( os . path . join ( 'share' , package_name ), [ 'package.xml' ]), ( os . path . join ( 'share' , package_name ), glob ( 'launch/*.launch.py' )), ], install_requires = [ 'setuptools' ], zip_safe = True , maintainer = 'user' , maintainer_email = 'robobe2020@gmail.com' , entry_points = { 'console_scripts' : [ 'pub = mulecar.publisher:main' ], }, ) (line 14) Copy launch files to install folder (line 22) Node entry point call by the launch file launch_ros.actions.Node method argument executable","title":"setup.py"},{"location":"ros2/launch/#build-and-run","text":"colcon build --symlink-install --packages-select <pkg_name> source install/setup.bash ros2 launch <pkg_name> <launc_file>.launch.py","title":"Build and Run"},{"location":"ros2/launch/#resources","text":"Launching/monitoring multiple nodes with Launch","title":"Resources"},{"location":"ros2/Exploring_ROS2_using_Wheeled_Robot/ReadLaser/","text":"Read Laser \u00b6 Run gazebo gazebo --verbose -s libgazebo_ros_factory.so Spawn entity xacro <full_path>/m2wr_description/urdf/m2wr.xacro | ros2 run gazebo_ros spawn_entity.py \\ -entity cart \\ -stdin Check topic \u00b6 ros2 topic info /m2wr/scan --verbose Type: sensor_msgs/msg/LaserScan Publisher count: 1 Node name: gazebo_ros_head_hokuyo_controller Node namespace: /m2wr Topic type: sensor_msgs/msg/LaserScan Endpoint type: PUBLISHER GID: 01.0f.e3.ae.e3.55.02.00.01.00.00.00.00.00.4d.03.00.00.00.00.00.00.00.00 QoS profile: Reliability: RMW_QOS_POLICY_RELIABILITY_RELIABLE Durability: RMW_QOS_POLICY_DURABILITY_VOLATILE Lifespan: 2147483651294967295 nanoseconds Deadline: 2147483651294967295 nanoseconds Liveliness: RMW_QOS_POLICY_LIVELINESS_AUTOMATIC Liveliness lease duration: 2147483651294967295 nanoseconds Subscription count: 0","title":"Read Laser"},{"location":"ros2/Exploring_ROS2_using_Wheeled_Robot/ReadLaser/#read-laser","text":"Run gazebo gazebo --verbose -s libgazebo_ros_factory.so Spawn entity xacro <full_path>/m2wr_description/urdf/m2wr.xacro | ros2 run gazebo_ros spawn_entity.py \\ -entity cart \\ -stdin","title":"Read Laser"},{"location":"ros2/Exploring_ROS2_using_Wheeled_Robot/ReadLaser/#check-topic","text":"ros2 topic info /m2wr/scan --verbose Type: sensor_msgs/msg/LaserScan Publisher count: 1 Node name: gazebo_ros_head_hokuyo_controller Node namespace: /m2wr Topic type: sensor_msgs/msg/LaserScan Endpoint type: PUBLISHER GID: 01.0f.e3.ae.e3.55.02.00.01.00.00.00.00.00.4d.03.00.00.00.00.00.00.00.00 QoS profile: Reliability: RMW_QOS_POLICY_RELIABILITY_RELIABLE Durability: RMW_QOS_POLICY_DURABILITY_VOLATILE Lifespan: 2147483651294967295 nanoseconds Deadline: 2147483651294967295 nanoseconds Liveliness: RMW_QOS_POLICY_LIVELINESS_AUTOMATIC Liveliness lease duration: 2147483651294967295 nanoseconds Subscription count: 0","title":"Check topic"},{"location":"ros2/Exploring_ROS2_using_Wheeled_Robot/SpawnEntity/","text":"Spawn entity \u00b6 Run gazebo \u00b6 gazebo --verbose -s libgazebo_ros_factory.so ros2 service list -t # /delete_entity [ gazebo_msgs/srv/DeleteEntity ] /gazebo/describe_parameters [ rcl_interfaces/srv/DescribeParameters ] /gazebo/get_parameter_types [ rcl_interfaces/srv/GetParameterTypes ] /gazebo/get_parameters [ rcl_interfaces/srv/GetParameters ] /gazebo/list_parameters [ rcl_interfaces/srv/ListParameters ] /gazebo/set_parameters [ rcl_interfaces/srv/SetParameters ] /gazebo/set_parameters_atomically [ rcl_interfaces/srv/SetParametersAtomically ] /get_model_list [ gazebo_msgs/srv/GetModelList ] /spawn_entity [ gazebo_msgs/srv/SpawnEntity ] Spawn \u00b6 Spawn box into world using: - spawn_entity.py Node - using service call /spawn_entity , /delete_entity - using custom node wrap spawn_entity service + aaa spawn_entity.py \u00b6 ros2 run gazebo_ros spawn_entity.py -entity myentity -x 1 -y 1 -z 0 -file /home/user/ros2_tutorial/src/m2wr_description/models/box/box.sdf service call \u00b6 Check msg structure ros2 interface show gazebo_msgs/srv/DeleteEntity # string name # Name of the Gazebo entity to be deleted. This can be either # a model or a light. --- bool success # Return true if deletion is successful. string status_message # Comments if available. Call Service ros2 service call /delete_entity 'gazebo_msgs/DeleteEntity' '{name: \"myentity\"}' Note Space between key value in message is mandatory custom node \u00b6 Create node that spawn entity #!/usr/bin/env python3 \"\"\" ros2 run m2wr_motion spawn_box box1 ns1 \"\"\" import rclpy import os import argparse from rclpy.node import Node from ament_index_python.packages import get_package_share_directory from gazebo_msgs.srv import SpawnEntity class SpawnBoxNode ( Node ): def __init__ ( self , args ): super () . __init__ ( 'spawn_box' ) self . args = args self . spawn_client = self . create_client ( SpawnEntity , \"/spawn_entity\" ) self . run () def run ( self ): sdf_file_path = os . path . join ( get_package_share_directory ( \"m2wr_description\" ), \"models\" , \"box\" , \"box.sdf\" ) request = SpawnEntity . Request () request . name = str ( self . args . name ) request . xml = open ( sdf_file_path , 'r' ) . read () request . robot_namespace = self . args . ns request . initial_pose . position . x = float ( self . args . x ) request . initial_pose . position . y = float ( self . args . y ) request . initial_pose . position . z = float ( self . args . z ) future = self . spawn_client . call_async ( request ) rclpy . spin_until_future_complete ( self , future ) if future . result () is not None : self . get_logger () . info ( 'response: %r ' % future . result ()) else : raise RuntimeError ( 'exception while calling service: %r ' % future . exception ()) def main (): rclpy . init () parser = argparse . ArgumentParser ( description = \"command args description\" ) parser . add_argument ( \"-n\" , \"--name\" , help = \"name\" , default = \"my_box\" ) parser . add_argument ( \"-s\" , \"--ns\" , help = \"namespace\" , default = \"\" ) parser . add_argument ( \"-x\" , type = float , help = \"x pose\" , default = 0 ) parser . add_argument ( \"-y\" , type = float , help = \"y pose\" , default = 0 ) parser . add_argument ( \"-z\" , type = float , help = \"z pose\" , default = 0 ) # Read arguments from command line args = parser . parse_args () my_node = SpawnBoxNode ( args ) rclpy . spin_once ( my_node ) my_node . destroy_node () rclpy . shutdown () if __name__ == '__main__' : main () Reference \u00b6 Spawn and delete Make a model","title":"Spawn entity"},{"location":"ros2/Exploring_ROS2_using_Wheeled_Robot/SpawnEntity/#spawn-entity","text":"","title":"Spawn entity"},{"location":"ros2/Exploring_ROS2_using_Wheeled_Robot/SpawnEntity/#run-gazebo","text":"gazebo --verbose -s libgazebo_ros_factory.so ros2 service list -t # /delete_entity [ gazebo_msgs/srv/DeleteEntity ] /gazebo/describe_parameters [ rcl_interfaces/srv/DescribeParameters ] /gazebo/get_parameter_types [ rcl_interfaces/srv/GetParameterTypes ] /gazebo/get_parameters [ rcl_interfaces/srv/GetParameters ] /gazebo/list_parameters [ rcl_interfaces/srv/ListParameters ] /gazebo/set_parameters [ rcl_interfaces/srv/SetParameters ] /gazebo/set_parameters_atomically [ rcl_interfaces/srv/SetParametersAtomically ] /get_model_list [ gazebo_msgs/srv/GetModelList ] /spawn_entity [ gazebo_msgs/srv/SpawnEntity ]","title":"Run gazebo"},{"location":"ros2/Exploring_ROS2_using_Wheeled_Robot/SpawnEntity/#spawn","text":"Spawn box into world using: - spawn_entity.py Node - using service call /spawn_entity , /delete_entity - using custom node wrap spawn_entity service + aaa","title":"Spawn"},{"location":"ros2/Exploring_ROS2_using_Wheeled_Robot/SpawnEntity/#spawn_entitypy","text":"ros2 run gazebo_ros spawn_entity.py -entity myentity -x 1 -y 1 -z 0 -file /home/user/ros2_tutorial/src/m2wr_description/models/box/box.sdf","title":"spawn_entity.py"},{"location":"ros2/Exploring_ROS2_using_Wheeled_Robot/SpawnEntity/#service-call","text":"Check msg structure ros2 interface show gazebo_msgs/srv/DeleteEntity # string name # Name of the Gazebo entity to be deleted. This can be either # a model or a light. --- bool success # Return true if deletion is successful. string status_message # Comments if available. Call Service ros2 service call /delete_entity 'gazebo_msgs/DeleteEntity' '{name: \"myentity\"}' Note Space between key value in message is mandatory","title":"service call"},{"location":"ros2/Exploring_ROS2_using_Wheeled_Robot/SpawnEntity/#custom-node","text":"Create node that spawn entity #!/usr/bin/env python3 \"\"\" ros2 run m2wr_motion spawn_box box1 ns1 \"\"\" import rclpy import os import argparse from rclpy.node import Node from ament_index_python.packages import get_package_share_directory from gazebo_msgs.srv import SpawnEntity class SpawnBoxNode ( Node ): def __init__ ( self , args ): super () . __init__ ( 'spawn_box' ) self . args = args self . spawn_client = self . create_client ( SpawnEntity , \"/spawn_entity\" ) self . run () def run ( self ): sdf_file_path = os . path . join ( get_package_share_directory ( \"m2wr_description\" ), \"models\" , \"box\" , \"box.sdf\" ) request = SpawnEntity . Request () request . name = str ( self . args . name ) request . xml = open ( sdf_file_path , 'r' ) . read () request . robot_namespace = self . args . ns request . initial_pose . position . x = float ( self . args . x ) request . initial_pose . position . y = float ( self . args . y ) request . initial_pose . position . z = float ( self . args . z ) future = self . spawn_client . call_async ( request ) rclpy . spin_until_future_complete ( self , future ) if future . result () is not None : self . get_logger () . info ( 'response: %r ' % future . result ()) else : raise RuntimeError ( 'exception while calling service: %r ' % future . exception ()) def main (): rclpy . init () parser = argparse . ArgumentParser ( description = \"command args description\" ) parser . add_argument ( \"-n\" , \"--name\" , help = \"name\" , default = \"my_box\" ) parser . add_argument ( \"-s\" , \"--ns\" , help = \"namespace\" , default = \"\" ) parser . add_argument ( \"-x\" , type = float , help = \"x pose\" , default = 0 ) parser . add_argument ( \"-y\" , type = float , help = \"y pose\" , default = 0 ) parser . add_argument ( \"-z\" , type = float , help = \"z pose\" , default = 0 ) # Read arguments from command line args = parser . parse_args () my_node = SpawnBoxNode ( args ) rclpy . spin_once ( my_node ) my_node . destroy_node () rclpy . shutdown () if __name__ == '__main__' : main ()","title":"custom node"},{"location":"ros2/Exploring_ROS2_using_Wheeled_Robot/SpawnEntity/#reference","text":"Spawn and delete Make a model","title":"Reference"},{"location":"ros2/gazebo/gazebo_ros/","text":"ROS2 Gazebo \u00b6 Run gazebo with ros2 functionality gazebo_ros_factory \u00b6 gazebo --verbose -s libgazebo_ros_factory.so ros2 service list # /delete_entity /gazebo/describe_parameters /gazebo/get_parameter_types /gazebo/get_parameters /gazebo/list_parameters /gazebo/set_parameters /gazebo/set_parameters_atomically /get_model_list /spawn_entity gazebo_ros_init \u00b6 gazebo --verbose -s libgazebo_ros_init.so ros2 service list # /pause_physics /reset_simulation /reset_world /spawn_entity /unpause_physics gazebo_ros_properties \u00b6 <?xml version=\"1.0\"?> <sdf version= \"1.4\" > <world name= \"default\" > <include> <uri> model://ground_plane </uri> </include> <include> <uri> model://sun </uri> </include> <plugin name= \"properties\" filename= \"libgazebo_ros_properties.so\" /> </world> </sdf> /get_joint_properties /get_light_properties /get_link_properties /get_model_properties /properties/describe_parameters /properties/get_parameter_types /properties/get_parameters /properties/list_parameters /properties/set_parameters /properties/set_parameters_atomically /set_joint_properties /set_light_properties /set_link_properties","title":"ROS2 Gazebo"},{"location":"ros2/gazebo/gazebo_ros/#ros2-gazebo","text":"Run gazebo with ros2 functionality","title":"ROS2 Gazebo"},{"location":"ros2/gazebo/gazebo_ros/#gazebo_ros_factory","text":"gazebo --verbose -s libgazebo_ros_factory.so ros2 service list # /delete_entity /gazebo/describe_parameters /gazebo/get_parameter_types /gazebo/get_parameters /gazebo/list_parameters /gazebo/set_parameters /gazebo/set_parameters_atomically /get_model_list /spawn_entity","title":"gazebo_ros_factory"},{"location":"ros2/gazebo/gazebo_ros/#gazebo_ros_init","text":"gazebo --verbose -s libgazebo_ros_init.so ros2 service list # /pause_physics /reset_simulation /reset_world /spawn_entity /unpause_physics","title":"gazebo_ros_init"},{"location":"ros2/gazebo/gazebo_ros/#gazebo_ros_properties","text":"<?xml version=\"1.0\"?> <sdf version= \"1.4\" > <world name= \"default\" > <include> <uri> model://ground_plane </uri> </include> <include> <uri> model://sun </uri> </include> <plugin name= \"properties\" filename= \"libgazebo_ros_properties.so\" /> </world> </sdf> /get_joint_properties /get_light_properties /get_link_properties /get_model_properties /properties/describe_parameters /properties/get_parameter_types /properties/get_parameters /properties/list_parameters /properties/set_parameters /properties/set_parameters_atomically /set_joint_properties /set_light_properties /set_link_properties","title":"gazebo_ros_properties"},{"location":"ros2/gazebo/plugin/","text":"Plugin \u00b6 sudo apt install ros-foxy-gazebo-ros-pkgs","title":"Plugin"},{"location":"ros2/gazebo/plugin/#plugin","text":"sudo apt install ros-foxy-gazebo-ros-pkgs","title":"Plugin"},{"location":"ros2/gazebo/spawn/","text":"Spawn \u00b6 Spawn in Delete support by libgazebo_ros_factory plugin Reference \u00b6 ROS 2 Migration: Spawn and delete","title":"Spawn"},{"location":"ros2/gazebo/spawn/#spawn","text":"Spawn in Delete support by libgazebo_ros_factory plugin","title":"Spawn"},{"location":"ros2/gazebo/spawn/#reference","text":"ROS 2 Migration: Spawn and delete","title":"Reference"},{"location":"ros2/launch/","text":"Hello ROS2 launch file \u00b6 launch file must contain generate_launch_description() function launch file must return LaunchDescription object Copy launch file to install folder \u00b6 cmake \u00b6 install ( DIRECTORY launch DESTINATION share / $ { PROJECT_NAME } ) python setup \u00b6 Add to data_files array (dest, src) from glob import glob ... import os from glob import glob from setuptools import setup package_name = 'my_package' setup ( # Other parameters ... data_files = [ # ... Other data files # Include all launch files. This is the most important line here! ( os . path . join ( 'share' , package_name ), glob ( 'launch/*.launch.py' )) ] ) References \u00b6 launch file example Launching/monitoring multiple nodes with Launch","title":"Hello ROS2 launch file"},{"location":"ros2/launch/#hello-ros2-launch-file","text":"launch file must contain generate_launch_description() function launch file must return LaunchDescription object","title":"Hello ROS2 launch file"},{"location":"ros2/launch/#copy-launch-file-to-install-folder","text":"","title":"Copy launch file to install folder"},{"location":"ros2/launch/#cmake","text":"install ( DIRECTORY launch DESTINATION share / $ { PROJECT_NAME } )","title":"cmake"},{"location":"ros2/launch/#python-setup","text":"Add to data_files array (dest, src) from glob import glob ... import os from glob import glob from setuptools import setup package_name = 'my_package' setup ( # Other parameters ... data_files = [ # ... Other data files # Include all launch files. This is the most important line here! ( os . path . join ( 'share' , package_name ), glob ( 'launch/*.launch.py' )) ] )","title":"python setup"},{"location":"ros2/launch/#references","text":"launch file example Launching/monitoring multiple nodes with Launch","title":"References"},{"location":"ros2/node/hello/","text":"Hello ROS2 Node \u00b6 Objective \u00b6 Write minimal ROS2 python Node Build and run Usage, run the same node multiple times Node \u00b6 import rclpy from rclpy.node import Node def main ( args = None ): rclpy . init ( args = args ) node = Node ( 'my_node_name' ) node . get_logger () . info ( \"hello node\" ) rclpy . spin ( node ) rclpy . shutdown () if __name__ == '__main__' : main () setup.py \u00b6 Add console entry point 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 from setuptools import setup import os from glob import glob package_name = 'camera_calibration' setup ( name = package_name , version = '0.0.0' , packages = [ package_name ], data_files = [ ( 'share/ament_index/resource_index/packages' , [ 'resource/' + package_name ]), ( 'share/' + package_name , [ 'package.xml' ]), ( os . path . join ( 'share' , package_name , \"sdf\" ), glob ( 'sdf/*' )), ( os . path . join ( 'share' , package_name ), glob ( 'launch/*' )) ], install_requires = [ 'setuptools' ], zip_safe = True , maintainer = 'user' , maintainer_email = 'robobe2020@gmail.com' , description = 'TODO: Package description' , license = 'TODO: License declaration' , tests_require = [ 'pytest' ], entry_points = { 'console_scripts' : [ 'img_sub = camera_calibration.sub_image:main' , 'mini = camera_calibration.mini_node:main' , 'pnode = camera_calibration.param_node:main' ], }, ) package.xml \u00b6 Add dependency 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 <?xml version=\"1.0\"?> <?xml-model href=\"http://download.ros.org/schema/package_format3.xsd\" schematypens=\"http://www.w3.org/2001/XMLSchema\"?> <package format= \"3\" > <name> camera_calibration </name> <version> 0.0.0 </version> <description> TODO: Package description </description> <maintainer email= \"robobe2020@gmail.com\" > user </maintainer> <license> TODO: License declaration </license> <test_depend> ament_copyright </test_depend> <test_depend> ament_flake8 </test_depend> <test_depend> ament_pep257 </test_depend> <test_depend> python3-pytest </test_depend> <depend> rclpy </depend> <export> <build_type> ament_python </build_type> </export> </package> Usage node \u00b6 Build Source Run 1 2 3 4 5 6 7 8 9 10 11 12 #build colcon build --packages-select camera_calibration --symlink-install # Source source install/setup.bash # Run ros2 run camera_calibration mini [ INFO ] [ 1635226536 .082675453 ] [ my_node_name ] : hello node # Run same node with different name ros2 run camera_calibration mini --ros-args -r __node: = other_node [ INFO ] [ 1635226555 .757267071 ] [ other_node ] : hello node","title":"Hello ROS2 Node"},{"location":"ros2/node/hello/#hello-ros2-node","text":"","title":"Hello ROS2 Node"},{"location":"ros2/node/hello/#objective","text":"Write minimal ROS2 python Node Build and run Usage, run the same node multiple times","title":"Objective"},{"location":"ros2/node/hello/#node","text":"import rclpy from rclpy.node import Node def main ( args = None ): rclpy . init ( args = args ) node = Node ( 'my_node_name' ) node . get_logger () . info ( \"hello node\" ) rclpy . spin ( node ) rclpy . shutdown () if __name__ == '__main__' : main ()","title":"Node"},{"location":"ros2/node/hello/#setuppy","text":"Add console entry point 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 from setuptools import setup import os from glob import glob package_name = 'camera_calibration' setup ( name = package_name , version = '0.0.0' , packages = [ package_name ], data_files = [ ( 'share/ament_index/resource_index/packages' , [ 'resource/' + package_name ]), ( 'share/' + package_name , [ 'package.xml' ]), ( os . path . join ( 'share' , package_name , \"sdf\" ), glob ( 'sdf/*' )), ( os . path . join ( 'share' , package_name ), glob ( 'launch/*' )) ], install_requires = [ 'setuptools' ], zip_safe = True , maintainer = 'user' , maintainer_email = 'robobe2020@gmail.com' , description = 'TODO: Package description' , license = 'TODO: License declaration' , tests_require = [ 'pytest' ], entry_points = { 'console_scripts' : [ 'img_sub = camera_calibration.sub_image:main' , 'mini = camera_calibration.mini_node:main' , 'pnode = camera_calibration.param_node:main' ], }, )","title":"setup.py"},{"location":"ros2/node/hello/#packagexml","text":"Add dependency 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 <?xml version=\"1.0\"?> <?xml-model href=\"http://download.ros.org/schema/package_format3.xsd\" schematypens=\"http://www.w3.org/2001/XMLSchema\"?> <package format= \"3\" > <name> camera_calibration </name> <version> 0.0.0 </version> <description> TODO: Package description </description> <maintainer email= \"robobe2020@gmail.com\" > user </maintainer> <license> TODO: License declaration </license> <test_depend> ament_copyright </test_depend> <test_depend> ament_flake8 </test_depend> <test_depend> ament_pep257 </test_depend> <test_depend> python3-pytest </test_depend> <depend> rclpy </depend> <export> <build_type> ament_python </build_type> </export> </package>","title":"package.xml"},{"location":"ros2/node/hello/#usage-node","text":"Build Source Run 1 2 3 4 5 6 7 8 9 10 11 12 #build colcon build --packages-select camera_calibration --symlink-install # Source source install/setup.bash # Run ros2 run camera_calibration mini [ INFO ] [ 1635226536 .082675453 ] [ my_node_name ] : hello node # Run same node with different name ros2 run camera_calibration mini --ros-args -r __node: = other_node [ INFO ] [ 1635226555 .757267071 ] [ other_node ] : hello node","title":"Usage node"},{"location":"ros2/node/node/","text":"Node \u00b6 Node with parameters \u00b6 import rclpy from rclpy.node import Node class MyNode ( Node ): def __init__ ( self ): super () . __init__ ( 'MyNode' ) self . get_logger () . info ( \"hello node\" ) self . declare_parameter ( 'demo_param' , False ) demo_param = self . get_parameter ( 'demo_param' ) self . get_logger () . info ( f \"param value: { demo_param . value } \" ) def main ( args = None ): rclpy . init ( args = args ) node = MyNode () rclpy . spin ( node ) rclpy . shutdown () if __name__ == '__main__' : main () build and run \u00b6 # build colcon build --packages-select ros2_workshop # run ros2 run ros2_workshop pnode # run with params ros2 run ros2_workshop pnode --ros-args -p demo_param: = True Nodes params \u00b6 list ros2 param list # Result /MyNode: simulation_mode use_sim_time get # ros2 param get <Node> <param name> ros2 param get /MyNode demo_param # Result Boolean value is: False Launch file \u00b6 Run node with parameters from launch file from launch import LaunchDescription from launch_ros.actions import Node def generate_launch_description (): return LaunchDescription ([ Node ( package = 'ros2_workshop' , executable = 'pnode' , parameters = [ { 'demo_param' : True } ], output = 'screen' , ) ]) Note Add line to setup.py data_files array data_files=[ (os.path.join('share', package_name), glob('launch/*.launch.py')) build and run \u00b6 # build colcon build --packages-select ros2_workshop # launch ros2 launch ros2_workshop node_with_params.launch.py Launch file with argument \u00b6 from launch import LaunchDescription from launch_ros.actions import Node from launch.actions import DeclareLaunchArgument from launch.substitutions import LaunchConfiguration def generate_launch_description (): demo_param = LaunchConfiguration ( 'demo_param' ) demo_param_cmd = DeclareLaunchArgument ( name = 'demo_param' , default_value = \"True\" ) simple_node_cmd = Node ( package = 'ros2_workshop' , executable = 'pnode' , parameters = [ { 'demo_param' : demo_param } ], output = 'screen' , ) ld = LaunchDescription () ld . add_action ( demo_param_cmd ) ld . add_action ( simple_node_cmd ) return ld Check \u00b6 Show launch file arguments ros2 launch ros2_workshop node_params_args.launch.py -s #result Arguments ( pass arguments as '<name>:=<value>' ) : 'demo_param' : no description given ( default: 'True' ) launch \u00b6 ros2 launch ros2_workshop node_params_args.launch.py demo_param:=False node YAML params \u00b6 load node parameters from YAML file Note Don't forget copy config folder to install folder data_files=[ ... (os.path.join('share', package_name, \"config\"), glob('config/*')) ], yaml file \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 node_with_yaml_params : ros__parameters : bool_value : True int_number : 5 float_number : 3.14 str_text : \"Hello Universe\" bool_array : [ True , False , True ] int_array : [ 10 , 11 , 12 , 13 ] float_array : [ 7.5 , 400.4 ] str_array : [ 'Nice' , 'more' , 'params' ] bytes_array : [ 0x01 , 0xF1 , 0xA2 ] nested_param : another_int : 7 node example \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 # https://roboticsbackend.com/ros2-yaml-params/ import rclpy from rclpy.node import Node class TestYAMLParams ( Node ): def __init__ ( self ): super () . __init__ ( 'node_with_yaml_params' ) self . declare_parameters ( namespace = '' , parameters = [ ( 'bool_value' , None ), ( 'int_number' , None ), ( 'float_number' , None ), ( 'str_text' , None ), ( 'bool_array' , None ), ( 'int_array' , None ), ( 'float_array' , None ), ( 'str_array' , None ), ( 'bytes_array' , None ), ( 'nested_param.another_int' , None ) ]) demo_param = self . get_parameter ( 'int_number' ) self . get_logger () . info ( f \"param value: { demo_param . value } \" ) demo_param = self . get_parameter ( 'str_array' ) self . get_logger () . info ( f \"param value: { demo_param . value } \" ) def main ( args = None ): rclpy . init ( args = args ) node = TestYAMLParams () rclpy . spin ( node ) node . destroy_node () rclpy . shutdown () if __name__ == '__main__' : main () run from cli \u00b6 ros2 run ros2_workshop yaml_node --ros-args --params-file src/ros2_workshop/config/params.yaml run from launch \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 import os from ament_index_python.packages import get_package_share_directory from launch import LaunchDescription from launch_ros.actions import Node def generate_launch_description (): ld = LaunchDescription () config = os . path . join ( get_package_share_directory ( 'ros2_workshop' ), 'config' , 'params.yaml' ) node = Node ( package = 'ros2_workshop' , name = 'node_with_yaml_params' , executable = 'yaml_node' , parameters = [ config ] ) ld . add_action ( node ) return ld Notet Notice that name in yaml params file must the same as the node name even in launch file name node argument References \u00b6 rclpy Params Tutorial","title":"Node"},{"location":"ros2/node/node/#node","text":"","title":"Node"},{"location":"ros2/node/node/#node-with-parameters","text":"import rclpy from rclpy.node import Node class MyNode ( Node ): def __init__ ( self ): super () . __init__ ( 'MyNode' ) self . get_logger () . info ( \"hello node\" ) self . declare_parameter ( 'demo_param' , False ) demo_param = self . get_parameter ( 'demo_param' ) self . get_logger () . info ( f \"param value: { demo_param . value } \" ) def main ( args = None ): rclpy . init ( args = args ) node = MyNode () rclpy . spin ( node ) rclpy . shutdown () if __name__ == '__main__' : main ()","title":"Node with parameters"},{"location":"ros2/node/node/#build-and-run","text":"# build colcon build --packages-select ros2_workshop # run ros2 run ros2_workshop pnode # run with params ros2 run ros2_workshop pnode --ros-args -p demo_param: = True","title":"build and run"},{"location":"ros2/node/node/#nodes-params","text":"list ros2 param list # Result /MyNode: simulation_mode use_sim_time get # ros2 param get <Node> <param name> ros2 param get /MyNode demo_param # Result Boolean value is: False","title":"Nodes params"},{"location":"ros2/node/node/#launch-file","text":"Run node with parameters from launch file from launch import LaunchDescription from launch_ros.actions import Node def generate_launch_description (): return LaunchDescription ([ Node ( package = 'ros2_workshop' , executable = 'pnode' , parameters = [ { 'demo_param' : True } ], output = 'screen' , ) ]) Note Add line to setup.py data_files array data_files=[ (os.path.join('share', package_name), glob('launch/*.launch.py'))","title":"Launch file"},{"location":"ros2/node/node/#build-and-run_1","text":"# build colcon build --packages-select ros2_workshop # launch ros2 launch ros2_workshop node_with_params.launch.py","title":"build and run"},{"location":"ros2/node/node/#launch-file-with-argument","text":"from launch import LaunchDescription from launch_ros.actions import Node from launch.actions import DeclareLaunchArgument from launch.substitutions import LaunchConfiguration def generate_launch_description (): demo_param = LaunchConfiguration ( 'demo_param' ) demo_param_cmd = DeclareLaunchArgument ( name = 'demo_param' , default_value = \"True\" ) simple_node_cmd = Node ( package = 'ros2_workshop' , executable = 'pnode' , parameters = [ { 'demo_param' : demo_param } ], output = 'screen' , ) ld = LaunchDescription () ld . add_action ( demo_param_cmd ) ld . add_action ( simple_node_cmd ) return ld","title":"Launch file with argument"},{"location":"ros2/node/node/#check","text":"Show launch file arguments ros2 launch ros2_workshop node_params_args.launch.py -s #result Arguments ( pass arguments as '<name>:=<value>' ) : 'demo_param' : no description given ( default: 'True' )","title":"Check"},{"location":"ros2/node/node/#launch","text":"ros2 launch ros2_workshop node_params_args.launch.py demo_param:=False","title":"launch"},{"location":"ros2/node/node/#node-yaml-params","text":"load node parameters from YAML file Note Don't forget copy config folder to install folder data_files=[ ... (os.path.join('share', package_name, \"config\"), glob('config/*')) ],","title":"node YAML params"},{"location":"ros2/node/node/#yaml-file","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 node_with_yaml_params : ros__parameters : bool_value : True int_number : 5 float_number : 3.14 str_text : \"Hello Universe\" bool_array : [ True , False , True ] int_array : [ 10 , 11 , 12 , 13 ] float_array : [ 7.5 , 400.4 ] str_array : [ 'Nice' , 'more' , 'params' ] bytes_array : [ 0x01 , 0xF1 , 0xA2 ] nested_param : another_int : 7","title":"yaml file"},{"location":"ros2/node/node/#node-example","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 # https://roboticsbackend.com/ros2-yaml-params/ import rclpy from rclpy.node import Node class TestYAMLParams ( Node ): def __init__ ( self ): super () . __init__ ( 'node_with_yaml_params' ) self . declare_parameters ( namespace = '' , parameters = [ ( 'bool_value' , None ), ( 'int_number' , None ), ( 'float_number' , None ), ( 'str_text' , None ), ( 'bool_array' , None ), ( 'int_array' , None ), ( 'float_array' , None ), ( 'str_array' , None ), ( 'bytes_array' , None ), ( 'nested_param.another_int' , None ) ]) demo_param = self . get_parameter ( 'int_number' ) self . get_logger () . info ( f \"param value: { demo_param . value } \" ) demo_param = self . get_parameter ( 'str_array' ) self . get_logger () . info ( f \"param value: { demo_param . value } \" ) def main ( args = None ): rclpy . init ( args = args ) node = TestYAMLParams () rclpy . spin ( node ) node . destroy_node () rclpy . shutdown () if __name__ == '__main__' : main ()","title":"node example"},{"location":"ros2/node/node/#run-from-cli","text":"ros2 run ros2_workshop yaml_node --ros-args --params-file src/ros2_workshop/config/params.yaml","title":"run from cli"},{"location":"ros2/node/node/#run-from-launch","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 import os from ament_index_python.packages import get_package_share_directory from launch import LaunchDescription from launch_ros.actions import Node def generate_launch_description (): ld = LaunchDescription () config = os . path . join ( get_package_share_directory ( 'ros2_workshop' ), 'config' , 'params.yaml' ) node = Node ( package = 'ros2_workshop' , name = 'node_with_yaml_params' , executable = 'yaml_node' , parameters = [ config ] ) ld . add_action ( node ) return ld Notet Notice that name in yaml params file must the same as the node name even in launch file name node argument","title":"run from launch"},{"location":"ros2/node/node/#references","text":"rclpy Params Tutorial","title":"References"},{"location":"ros2/node/templates/","text":"ROS2 Node Templates \u00b6 Python basic \u00b6 Using timer to execute flow in specific intervals Using logger #!/usr/bin/env python3 import rclpy from rclpy.impl.rcutils_logger import SkipFirst from rclpy.node import Node from rclpy.clock import Clock class Simple_Node ( Node ): def __init__ ( self ): super () . __init__ ( 'simple_node' ) # Create a timer that will gate the node actions twice a second timer_period = 0.5 # seconds self . timer = self . create_timer ( timer_period , self . node_callback ) self . system_clock = Clock () def node_callback ( self ): # self.get_logger().debug('simple_node is alive') # self.get_logger().info('simple_node is alive') # self.get_logger().warning('simple_node is alive') # self.get_logger().error('simple_node is alive') # self.get_logger().info('log once', once=True) self . get_logger () . error ( 'log once' , once = True ) self . get_logger () . info ( 'skip first' , skip_first = True ) self . get_logger () . warn ( 'throttle' , throttle_duration_sec = 2 , throttle_time_source_type = self . system_clock ) def main ( args = None ): rclpy . init ( args = args ) my_node = Simple_Node () # instantiate my simple_node rclpy . spin ( my_node ) # execute simple_node my_node . destroy_node () rclpy . shutdown () if __name__ == '__main__' : main () Logger \u00b6 Logger level configuration Console output formatting \u00b6 export RCUTILS_CONSOLE_OUTPUT_FORMAT=\"[{severity} {time}] [{name}]: {message} \" file_name: the full file name of the caller including the path function_name: the function name of the caller line_number: the line number of the caller message: the message string after it has been formatted name: the full logger name severity: the name of the severity level, e.g. INFO time: the timestamp of log message in floating point seconds Console output colorizing \u00b6 ros doc # 1: colored # 0: no color export RCUTILS_COLORIZED_OUTPUT = 0 Control log level \u00b6 Run node with log level control debug (green) info (white) warn (yellow) error (red) ros2 run ros2_workshop t_node --ros-args --log-level debug ros2 run ros2_workshop t_node --ros-args --log-level warn ) Log once \u00b6 Add once argument to log method self . get_logger () . info ( 'log once' , once = True ) self . get_logger () . error ( 'log once' , once = True ) Note See the log once log lines Log skip and throttle \u00b6 Control log output self . get_logger () . info ( 'skip first' , skip_first = True ) self . get_logger () . warn ( 'skip and throttle' , throttle_duration_sec = 2 , throttle_time_source_type = self . system_clock ) Note declare self.system_clock = Clock() in class __init__ import from rclpy.clock import Clock","title":"node template"},{"location":"ros2/node/templates/#ros2-node-templates","text":"","title":"ROS2 Node Templates"},{"location":"ros2/node/templates/#python-basic","text":"Using timer to execute flow in specific intervals Using logger #!/usr/bin/env python3 import rclpy from rclpy.impl.rcutils_logger import SkipFirst from rclpy.node import Node from rclpy.clock import Clock class Simple_Node ( Node ): def __init__ ( self ): super () . __init__ ( 'simple_node' ) # Create a timer that will gate the node actions twice a second timer_period = 0.5 # seconds self . timer = self . create_timer ( timer_period , self . node_callback ) self . system_clock = Clock () def node_callback ( self ): # self.get_logger().debug('simple_node is alive') # self.get_logger().info('simple_node is alive') # self.get_logger().warning('simple_node is alive') # self.get_logger().error('simple_node is alive') # self.get_logger().info('log once', once=True) self . get_logger () . error ( 'log once' , once = True ) self . get_logger () . info ( 'skip first' , skip_first = True ) self . get_logger () . warn ( 'throttle' , throttle_duration_sec = 2 , throttle_time_source_type = self . system_clock ) def main ( args = None ): rclpy . init ( args = args ) my_node = Simple_Node () # instantiate my simple_node rclpy . spin ( my_node ) # execute simple_node my_node . destroy_node () rclpy . shutdown () if __name__ == '__main__' : main ()","title":"Python basic"},{"location":"ros2/node/templates/#logger","text":"Logger level configuration","title":"Logger"},{"location":"ros2/node/templates/#console-output-formatting","text":"export RCUTILS_CONSOLE_OUTPUT_FORMAT=\"[{severity} {time}] [{name}]: {message} \" file_name: the full file name of the caller including the path function_name: the function name of the caller line_number: the line number of the caller message: the message string after it has been formatted name: the full logger name severity: the name of the severity level, e.g. INFO time: the timestamp of log message in floating point seconds","title":"Console output formatting"},{"location":"ros2/node/templates/#console-output-colorizing","text":"ros doc # 1: colored # 0: no color export RCUTILS_COLORIZED_OUTPUT = 0","title":"Console output colorizing"},{"location":"ros2/node/templates/#control-log-level","text":"Run node with log level control debug (green) info (white) warn (yellow) error (red) ros2 run ros2_workshop t_node --ros-args --log-level debug ros2 run ros2_workshop t_node --ros-args --log-level warn )","title":"Control log level"},{"location":"ros2/node/templates/#log-once","text":"Add once argument to log method self . get_logger () . info ( 'log once' , once = True ) self . get_logger () . error ( 'log once' , once = True ) Note See the log once log lines","title":"Log once"},{"location":"ros2/node/templates/#log-skip-and-throttle","text":"Control log output self . get_logger () . info ( 'skip first' , skip_first = True ) self . get_logger () . warn ( 'skip and throttle' , throttle_duration_sec = 2 , throttle_time_source_type = self . system_clock ) Note declare self.system_clock = Clock() in class __init__ import from rclpy.clock import Clock","title":"Log skip and throttle"},{"location":"ros2/tf/","text":"TF2 \u00b6 Transform library which lets the user keep track of multiple coordinate frame over time Robot state publisher sudo apt install ros-foxy-turtle-tf2-py sudo apt install ros-foxy-turtle-tf2-py Reference \u00b6 Introduction to tf2 geometry tutorials all you need to know about tf and tf2 in ros F1/10 Autonomous Racing","title":"TF2"},{"location":"ros2/tf/#tf2","text":"Transform library which lets the user keep track of multiple coordinate frame over time Robot state publisher sudo apt install ros-foxy-turtle-tf2-py sudo apt install ros-foxy-turtle-tf2-py","title":"TF2"},{"location":"ros2/tf/#reference","text":"Introduction to tf2 geometry tutorials all you need to know about tf and tf2 in ros F1/10 Autonomous Racing","title":"Reference"}]}